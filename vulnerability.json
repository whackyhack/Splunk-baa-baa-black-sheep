{
    "title": "Vulnerability Report",
    "description": "",
    "inputs": {
        "input_OlOXhdWt": {
            "options": {
                "defaultValue": "count",
                "items": [
                    {
                        "label": "Additions count",
                        "value": "count"
                    },
                    {
                        "label": "Additions list",
                        "value": "list"
                    }
                ],
                "token": "info_tok"
            },
            "title": "info",
            "type": "input.dropdown"
        },
        "input_YipLJHSC": {
            "options": {
                "defaultValue": [
                    "group"
                ],
                "items": [
                    {
                        "label": "Group",
                        "value": "group"
                    },
                    {
                        "label": "Silo",
                        "value": "silo"
                    }
                ],
                "token": "show_tok"
            },
            "title": "also show",
            "type": "input.multiselect"
        },
        "input_aWxa13O3": {
            "dataSources": {
                "primary": "ds_TmTjng2m"
            },
            "options": {
                "defaultValue": "*",
                "items": [
                    {
                        "label": "All",
                        "value": "*"
                    }
                ],
                "token": "silo_tok"
            },
            "title": "Select silo",
            "type": "input.dropdown"
        },
        "input_cnyQEIzj": {
            "dataSources": {
                "primary": "ds_zsxCMki7"
            },
            "options": {
                "defaultValue": "*",
                "items": [
                    {
                        "label": "All",
                        "value": "*"
                    }
                ],
                "token": "group_tok"
            },
            "title": "Select group",
            "type": "input.dropdown"
        },
        "input_global_trp": {
            "options": {
                "defaultValue": "-7d@h,now",
                "token": "global_time"
            },
            "title": "Global Time Range",
            "type": "input.timerange"
        }
    },
    "defaults": {
        "dataSources": {
            "ds.search": {
                "options": {
                    "queryParameters": {
                        "earliest": "$global_time.earliest$",
                        "latest": "$global_time.latest$"
                    }
                }
            }
        }
    },
    "visualizations": {
        "viz_EVyQbupt": {
            "dataSources": {
                "primary": "ds_QTxzE3Lj"
            },
            "options": {
                "count": 50,
                "dataOverlayMode": "none",
                "drilldown": "none",
                "showInternalFields": false,
                "showRowNumbers": false
            },
            "title": "Enriched events",
            "type": "splunk.table"
        },
        "viz_Xx9zCxnv": {
            "containerOptions": {
                "visibility": {}
            },
            "dataSources": {
                "primary": "ds_UFgpDvxg"
            },
            "description": "Left-most is the most recent.  Cells display exposures/exposed host count, then info about additional vulnerability(ies)",
            "options": {
                "showInternalFields": false
            },
            "type": "splunk.table"
        }
    },
    "dataSources": {
        "ds_QTxzE3Lj": {
            "name": "Enriched events - Table search",
            "options": {
                "query": "| makeresults count=70\n``` first, we create points in time ```\n| streamstats count as _time_counter\n| eval _time = now() - _time_counter * 43200\n| search \n    [tstats min(_time) as earliest max(_time) as latest\n    where index=_internal earliest=$global_time.earliest$ latest=$global_time.latest$\n    | eval search = \"_time > \" . earliest . \" _time < \" . latest\n    | fields search]\n``` second, we declare silos. ```\n| eval _silos = mvappend(\"DOGE\",\"Health\", \"Medicare & Medicaid\", \"NIH\", \"CDC\", \"FDA\")\n| eval silo_counter = mvrange(0, 6)\n| mvexpand silo_counter\n| rename silo_counter as _silo_counter\n| eval silo =mvindex(_silos, _silo_counter)\n``` uncomment the following to make sure all silos are declared\n| stats dc(silo)\n```\n``` declare uneven, but not extreme asset allocation ```\n| eval _silo_asset_count = ((19 - _silo_counter) % 12 + 4) * (8 - _silo_counter)\n``` uncomment the following to verify asset allocation is unevan but not extreme\n| stats values(_silo_asset_count) by silo\n```\n``` third, we allocate hosts to silos, assuming no change in time. ```\n| eval host_counter = mvrange(1, _silo_asset_count)\n| mvexpand host_counter\n| rename host_counter as _host_counter\n| eval host = \"noix\" . printf(\"%03d\", (_host_counter * 6 + _silo_counter))\n``` uncomment the following to confirm that distribution by silo is uneven but not extreme\n| stats dc(host) by silo\n```\n``` uncomment the following to verify that no host is assigned twice - expect no output\n| stats dc(silo) as unity by host\n| eval bad = if(unity > 1, 1, null())\n| fillnull bad\n| stats sum(bad) dc(host)\n```\n| eval VID = round(_host_counter / 4 + _time_counter) % 15 + 1\n| lookup vulnerabilities.csv VID\n| eval first_detected = relative_time(now(), -(ceil(first_detected * first_detected / 80)) . \"h\")\n| tojson output_field=_vulnerability VID, Title, CVSS3_1_base first_detected group\n| eval _vulnerability = if(_time < first_detected\n  OR Title == \"Brain worm\" AND silo != \"Health\"\n  OR Title == \"Rabies\" AND silo != \"DOGE\" OR Title == \"Meningitis (bacterial)\" AND silo != \"CDC\"\n  OR Title == \"Tetanus\" AND silo != \"Medicare & Medicaid\",\n  null(), _vulnerability)\n| fields - VID, Title, CVSS3_1_base first_detected group\n| where isnotnull(_vulnerability)\n| spath input=_vulnerability\n``` data emulation above ``` \n",
                "queryParameters": {}
            },
            "type": "ds.search"
        },
        "ds_TmTjng2m": {
            "name": "silo list",
            "options": {
                "extend": "ds_QTxzE3Lj",
                "query": "| fields silo\n| dedup silo\n| sort silo"
            },
            "type": "ds.chain"
        },
        "ds_UFgpDvxg": {
            "name": "breakdown view",
            "options": {
                "extend": "ds_QTxzE3Lj",
                "query": "| search group = \"$group_tok$\" silo = \"$silo_tok$\"\n| eval rating = case(isnull(CVSS3_1_base) OR CVSS3_1_base == 0, 1, CVSS3_1_base < 4, 2,\n  CVSS3_1_base < 6, 3, CVSS3_1_base < 8, 4, CVSS3_1_base < 10, 5, true(), 5.5)\n| eval exposure = VID . \"/\" . host\n| bin _time span=1d\n| eventstats max(rating) as max_rating by _time $show_tok$\n| eval lead_VID = if(rating != max_rating, null(),\n  json_object(\"lead\", Title, \"max_rating\", rating))\n| stats max(lead_VID) as lead_VID dc(exposure) as exposure dc(host) as assets values(Title) as additions\n  min(first_detected) as min_detected\n  by _time $show_tok$\n| eval additions = mvmap(additions, nullif(additions, json_extract(lead_VID, \"lead\"))) ``` remove lead from additions ```\n| eval display = mvappend(exposure . \"/\" . assets,\n  \"+\" . if(\"$info_tok$\" == \"list\", mvjoin(additions, \" +\"), mvcount(additions) . \" VIDs\"))\n| nomv display\n| reltime timefield=min_detected\n| foreach min_detected reltime $show_tok$\n    [eval lead_VID = json_set(lead_VID, \"<<FIELD>>\", <<FIELD>>)]\n| chart limit=0 values(display) over _time by lead_VID\n| sort - _time\n| eval _time = strftime(_time, \"%F\")\n| transpose 0 header_field=_time column_name=group_lead\n| foreach lead max_rating min_detected reltime $show_tok$\n    [eval _<<FIELD>> = json_extract(group_lead, \"<<FIELD>>\")]\n| eval _group_order = case(_group == \"parasite\", 1, _group == \"virus\", 2, true(), 3)\n| sort - _max_rating + _group_order _silo _lead\n| eval group_lead = _group . \": \" . _lead . \"/\"\n  . case(_max_rating > 5, \"üî•hot\", _max_rating > 4, \"‚ö†Ô∏èCritical\", _max_rating > 3, \"High\", _max_rating > 2, \"Medium\")\n  . if(_min_detected > relative_time(now(), \"-6month\"), \">\", \"‚´∏\") . _reltime\n  . if(isnull(_silo), \"\", \"üëâüèº\" . _silo)"
            },
            "type": "ds.chain"
        },
        "ds_zsxCMki7": {
            "name": "group list",
            "options": {
                "extend": "ds_QTxzE3Lj",
                "query": "| fields group\n| dedup group\n| sort group"
            },
            "type": "ds.chain"
        }
    },
    "layout": {
        "globalInputs": [
            "input_YipLJHSC",
            "input_OlOXhdWt",
            "input_cnyQEIzj",
            "input_aWxa13O3",
            "input_global_trp"
        ],
        "layoutDefinitions": {
            "layout_1": {
                "options": {
                    "display": "auto",
                    "height": 1040,
                    "width": 1440
                },
                "structure": [
                    {
                        "item": "viz_EVyQbupt",
                        "position": {
                            "h": 230,
                            "w": 1440,
                            "x": 0,
                            "y": 800
                        },
                        "type": "block"
                    },
                    {
                        "item": "viz_Xx9zCxnv",
                        "position": {
                            "h": 790,
                            "w": 1430,
                            "x": 0,
                            "y": 0
                        },
                        "type": "block"
                    }
                ],
                "type": "absolute"
            }
        },
        "options": {},
        "tabs": {
            "items": [
                {
                    "label": "New tab",
                    "layoutId": "layout_1"
                }
            ]
        }
    }
}